{"version":3,"sources":["Components/TextFieldInput.js","Components/CardList.js","App.js","services/fetchSpells.js","serviceWorker.js","index.js"],"names":["TextFieldInput","props","getInputValue","bind","event","value","currentTarget","this","getInputSpell","noValidate","autoComplete","className","TextField","id","label","variant","onChange","React","Component","CardList","spells","inputSpell","spellsFilter","filter","spell","toUpperCase","includes","map","key","_id","Card","background","grey","CardActionArea","CardContent","Typography","gutterBottom","component","color","effect","type","App","state","getSpells","url","fetch","then","response","json","data","setState","CircularProgress","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"sWAwBgBA,G,kBAnBd,WAAYC,GAAO,IAAD,8BAChB,4CAAMA,KACDC,cAAe,EAAKA,cAAcC,KAAnB,gBAFJ,E,2EAKJC,GAAO,IACZC,EAAQD,EAAME,cAAdD,MACPE,KAAKN,MAAMO,cAAcH,K,+BAI3B,OACE,0BAAQI,YAAU,EAACC,aAAa,MAAMC,UAAU,cAC9C,kBAACC,EAAA,EAAD,CAAWD,UAAU,cAAcE,GAAG,eAAeC,MAAM,eAAeC,QAAQ,SAASC,SAAUT,KAAKL,qB,GAdnFe,IAAMC,Y,gDC0CpBC,E,iLAnCH,IAAD,EACwBZ,KAAKN,MAA5BmB,EADD,EACCA,OAAQC,EADT,EACSA,WACVC,EAAeF,EAAOG,QAAO,SAAAC,GAAK,OAAIA,EAAMA,MAAMC,cAAcC,SAASL,EAAWI,kBAC1F,OACE,yBAAKd,UAAU,qBACb,wBAAIA,UAAU,gBACXW,EACEK,KAAI,SAAAH,GACH,OACE,wBAAII,IAAKJ,EAAMK,IAAKlB,UAAU,gBAC5B,kBAACmB,EAAA,EAAD,CAAMnB,UAAU,cAAcoB,WAAYC,KACxC,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAYC,cAAY,EAACrB,QAAQ,KAAKsB,UAAU,MAC7Cb,EAAMA,OAET,kBAACW,EAAA,EAAD,CAAYpB,QAAQ,QAAQuB,MAAM,gBAAgBD,UAAU,KAA5D,UACUb,EAAMe,QAEhB,kBAACJ,EAAA,EAAD,CAAYpB,QAAQ,QAAQuB,MAAM,gBAAgBD,UAAU,KAA5D,SACSb,EAAMgB,mB,GAtBhBvB,IAAMC,W,QCkDduB,G,kBAjDb,WAAYxC,GAAO,IAAD,8BAChB,4CAAMA,KACDyC,MAAM,CACTtB,OAAO,KACPC,WAAW,IAEb,EAAKsB,UAAY,EAAKA,UAAUxC,KAAf,gBACjB,EAAKK,cAAgB,EAAKA,cAAcL,KAAnB,gBAPL,E,iFAUhBI,KAAKoC,c,kCAEK,ICtBOC,EDsBR,QCtBQA,EDuBL,uGCvBaC,MAAOD,GAAME,MAAK,SAAAC,GAAQ,OAAIA,EAASC,WDwB/DF,MAAK,SAAAG,GACJ,EAAKC,SAAS,CACZ9B,OAAO6B,S,oCAKC5C,GACZE,KAAK2C,SAAS,CACZ7B,WAAWhB,M,+BAIN,IAAD,EACwBE,KAAKmC,MAA5BtB,EADD,EACCA,OAASC,EADV,EACUA,WAChB,OACA,yBAAKV,UAAU,OACX,4BAAQA,UAAU,cAChB,wBAAIA,UAAU,cAAd,0BAEHS,EACD,yBAAKT,UAAU,YACf,kBAAC,EAAD,CAAgBH,cAAeD,KAAKC,gBACpC,kBAAC,EAAD,CAAUY,OAAQA,EAAQC,WAAYA,KAGtC,yBAAKV,UAAU,YACf,kBAACwC,EAAA,EAAD,CAAkBxC,UAAU,qBAAqB2B,MAAM,kB,GA1C3CrB,IAAMC,YEGJkC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMjB,MAAK,SAAAkB,GACjCA,EAAaC,kB","file":"static/js/main.dff5afee.chunk.js","sourcesContent":["import React from 'react';\nimport TextField from '@material-ui/core/TextField';\nimport './../scss/TextFieldInput.scss'\n\nclass TextFieldInput extends React.Component {\n  constructor(props){\n    super(props);\n    this.getInputValue= this.getInputValue.bind(this);\n  }\n\n  getInputValue(event){\n    const {value}= event.currentTarget\n    this.props.getInputSpell(value)\n  }\n\n  render(){\n  return (\n    <form   noValidate autoComplete=\"off\" className=\"Text__form\">\n      <TextField className=\"Text__field\" id=\"filled-basic\" label=\"Search spell\" variant=\"filled\" onChange={this.getInputValue}  />\n    </form>\n  );\n  }\n}\n\nexport default  TextFieldInput ;","import React from 'react';\nimport Card from '@material-ui/core/Card';\nimport CardActionArea from '@material-ui/core/CardActionArea';\nimport CardContent from '@material-ui/core/CardContent';\nimport Typography from '@material-ui/core/Typography';\nimport './../scss/CardList.scss'\nimport { grey } from '@material-ui/core/colors';\n\n\nclass CardList extends React.Component {\n  \n  render() {\n    const { spells, inputSpell } = this.props;\n    const spellsFilter = spells.filter(spell => spell.spell.toUpperCase().includes(inputSpell.toUpperCase()))\n    return (\n      <div className=\"spells__container\">\n        <ol className=\"spells__list\">\n          {spellsFilter\n            .map(spell => {\n              return (\n                <li key={spell._id} className=\"spells__item\">\n                  <Card className=\"spell__card\" background={grey}>\n                    <CardActionArea>\n                      <CardContent>\n                        <Typography gutterBottom variant=\"h5\" component=\"h2\">\n                          {spell.spell}\n                        </Typography>\n                        <Typography variant=\"body2\" color=\"textSecondary\" component=\"p\">\n                          Effect:{spell.effect}\n                        </Typography>\n                        <Typography variant=\"body2\" color=\"textSecondary\" component=\"p\">\n                          Type: {spell.type}\n                        </Typography>\n                      </CardContent>\n                      </CardActionArea>  \n                  </Card>\n                </li>\n              )\n            })}\n        </ol>\n\n      </div>\n    );\n  }\n}\n\nexport default CardList;\n","import React from 'react';\nimport { fetchSpells } from './services/fetchSpells';\nimport TextFieldInput from './Components/TextFieldInput';\nimport CardList from './Components/CardList';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport './App.scss';\n\n\n\nclass App extends React.Component{\n  constructor(props){\n    super(props);\n    this.state={\n      spells:null,\n      inputSpell:''\n    }\n    this.getSpells = this.getSpells.bind(this);\n    this.getInputSpell = this.getInputSpell.bind(this);\n  }\n  componentDidMount(){\n    this.getSpells();\n  }\n  getSpells(){\n    fetchSpells('https://www.potterapi.com/v1/spells?key=$2a$10$W4Y/r9zaxMfJVdSv/V9U3.6ETMSveALxjAQy9duMzjpaISSQbU8ty')\n    .then(data=>{\n      this.setState({\n        spells:data\n      })\n    })\n  }\n\n  getInputSpell(value){\n    this.setState({\n      inputSpell:value\n    })\n  };\n\n  render(){\n    const {spells , inputSpell} = this.state;\n    return(\n    <div className=\"App\">\n        <header className=\"app_header\">\n          <h1 className=\"app__title\">Harry Potter's Spells</h1>\n        </header>\n      {spells ?\n      <div className=\"app_main\">\n      <TextFieldInput getInputSpell={this.getInputSpell}></TextFieldInput>\n      <CardList spells={spells} inputSpell={inputSpell}></CardList>\n      </div >\n         : \n      <div className=\"app_main\">\n      <CircularProgress className=\"circular__progress\" color=\"primary\" />\n      </div>\n      }\n    </div>\n    );\n  }\n}\n\nexport default App;\n","const fetchSpells = (url) => fetch( url ).then(response => response.json());\n\nexport {fetchSpells}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}